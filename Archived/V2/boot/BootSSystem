The Boot_S_System works as follows

1. A Lexicon with Key "STATE" and Value 0 is created.
2. The Lexicon is writen to '1:/S' in JSON format.
3. All of the files in the folder 0:/Missions/<SHIPNAME>/ is compiled.
4. 0:/Missions/<SHIPNAME>/0.ksm is copied to the root folder.
5. if 0.ksm was copied then we both copy and compile genBootS to 1:/boot/
6. genBootS is set as the boot file.
7. System is rebooted.
8. if 0.ksm was not available then we wait 5 seconds and reboot.

At this point we expect genBootS to start:
1. use READJSON to read S to find the STATE.
2. check that we have S:STATE.VALUE in our root folder and run it if we have.
3. if we do not have S:STATE:VALUE in our root then try to download it.
4. We should allow for emergency code execution in the form of X.ks if this file is available.







1. InitBootS starts by writing '0.ksm' to file '1:/S'.
2. The SHIP:NAME is used to fetch the mission files from '0:/Missions/<SHIPNAME>/<X>.ks' where X is the content of '1:/S'
3. Thus on Archive 0 we expect to always have the <SHIPNAME> folder in Missions, and at the very least 0.ks in there.
   We hope to have a mission doc there also to give some more information on that is going on.



What needs to be done for the system to work?
1. When creating the rocket, set the boot file to initBootS.ks for the loader. 
2. Within the Missions folder create a subfolder with the name of the rocker.
3. Create a file named 0.ks or x.ks which will be the code which will be run.
4. You can create 0.ks, 1.ks, etc. where when you want to move to the next program you call "SetNextState()" and end the program, which will cause the system to reboot and try to get the next program and start it.
5. If x.ks is available then it will be collected and run instead.


What is happening in simple terms?
1. When the ship boots with initBootS.ks it looks at the KSC archive within its Mission folder for whatever .ks files there are and compile them all.
2. It copies over the genboot.ksm replacing the initboot.ks
3. IT makes sure that 0.ks is there or it will not start, but will copy the compiled file if it does.
4. Ship reboots and starts the actual program.
5. When the ship calls "SetNextState()" and ends the current program, then the ship's genbootS system takes over again and reboots the ship which will cause it to contact the KSC archive mission folder and see if x.ksm is availble or 1.ksm
6. If x.ksm is available it will be downloaded and renamed on the archive and executed on the ship.
7. If x.ksm is not available then 1.ksm will be run instaed. 







TODO: check if we can execute files without an extension, such that we can maybe have a minification
  system that drops the extension and that file is loaded instead.

I have read the compile documentation some, and it seems that we really don't need a minification program/system, since
we can compile the source into ksm files. We will lose some debug information along the way, but we may save alot of space.

So we are going to add this compile code to the Boot_S_System.
