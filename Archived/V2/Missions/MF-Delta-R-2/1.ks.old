requireLib("mathUtils").

function AngleForIntersection {
	parameter Orbit1, Orbit2.
	return abs(Constant:RadToDeg * CONSTANT:PI * (1 - 1.41421356237 * SQRT((Orbit1:SEMIMAJORAXIS/Orbit2:SEMIMAJORAXIS + 1)^3))).
}

function TimeFromBurnToApproach {
	parameter Orbit1,	Orbit2.
	set sumPow to (Orbit1:SEMIMAJORAXIS+Orbit2:SEMIMAJORAXIS)^3.
	return CONSTANT:PI * SQRT(sumPow/(8*Orbit1:BODY:MU)).
}

//delta V necessary for the orbits
function DELTAV1 {
	parameter Orbit1, Orbit2.
	set sum to Orbit1:SEMIMAJORAXIS+Orbit2:SEMIMAJORAXIS.
	return SQRT(Orbit1:BODY:MU/Orbit1:SEMIMAJORAXIS) * (SQRT(2*Orbit2:SEMIMAJORAXIS/sum) - 1).
}

function DELTAV2 {
	parameter Orbit1, Orbit2.
	set sum to Orbit1:SEMIMAJORAXIS+Orbit2:SEMIMAJORAXIS.
	return SQRT(Orbit2:BODY:MU/Orbit2:SEMIMAJORAXIS) * (1 - SQRT(2*Orbit1:SEMIMAJORAXIS/sum)).
}

function TOTALDELTAVFORHM {
	parameter Orbit1, Orbit2.

	return DELTAV1(Orbit1, Orbit2) + DELTAV2(Orbit1, Orbit2).
}

function ValueDiff {
	parameter Val1, Val2, tolerance.
	return val1 + tolerance > val2 and val1 - tolerance < val2.
}

clearscreen.
Print "Now we are ready to go to Mun.".
print "And we have to do a half-Hohmann Transfer such that we create a flyby.".

if SHIP:STATUS = "ORBITING" and OBT:BODY:NAME = "Kerbin" {
	//Do Mum approach.
	print "Starting Mum approach.".

  set TARGET to "Mun".

	set targeAlt to 125000.

	if OBT:PERIAPSIS < targeAlt {
		print "We have to raise the Orbit.".
		//we need to raise our orbit, since the vector operations don't seem to function if the angles are greater than 90degrees.

		print "First going to the PERIAPSIS".
		set kuniverse:timewarp:mode to "RAILS".
		until ETA:PERIAPSIS < 5 {
			set kuniverse:timewarp:rate to ETA:PERIAPSIS.
			wait 0.
		}
		kuniverse:timewarp:cancelwarp().

		print "And raise the the APOAPSIS".

		lock steering to PROGRADE.
		wait 2.
		set throttle to 1.
		wait until APOAPSIS > targeAlt.
		set throttle to 0.

		print "Then going to the PERIAPSIS".
		until ETA:APOAPSIS < 15 {
			set kuniverse:timewarp:rate to ETA:APOAPSIS.
			wait 0.
		}
		kuniverse:timewarp:cancelwarp().

		print "And raise the the PERIAPSIS".
		wait 2.
		set throttle to 1.
		wait until PERIAPSIS > targeAlt.
		set throttle to 0.

		print "Manuver complete.".
		print " ".
		print " ".
		print " ".
		print " ".
		print " ".
	}

  set AngleForIntersect to AngleForIntersection(OBT, TARGET:ORBIT).
  set DV1 to DELTAV1(OBT, TARGET:ORBIT).

  print "Target Angle is: " + AngleForIntersect.
  print "Target DeltaV1: " + DV1.


	//we need some way to ensure that the angle we target is such that the target object is ahead us.
	lock ShipPointy to SHIP:POSITION - OBT:BODY:POSITION.
	lock TargetVector to TARGET:POSITION - OBT:BODY:POSITION.
  lock AngleDiff to vang(TargetVector, ShipPointy).
	set UpVector to vcrs(ShipPointy, SHIP:VELOCITY:ORBIT).
	lock TargetFlyToVector to RotateVector(AngleDiff, UpVector, ShipPointy).

//	set vd4 TO VECDRAW(Kerbin:position, TARGET:POSITION - Kerbin:position, RGB(1,0,0), "Target Pos", 1.0, TRUE, 0.2, TRUE,	TRUE ).

  set kuniverse:timewarp:mode to "RAILS".
	until TargetFlyToVector:NORMALIZED * TargetVector:NORMALIZED >= 0.9996 {
		print "Angle Diff: " + AngleDiff at (0,10).
		print "Dot product of the two vectors of interest: " + TargetFlyToVector:NORMALIZED * TargetVector:NORMALIZED at (0,11).

		CLEARVECDRAWS().

	  set vd1 TO VECDRAW(Kerbin:position, TargetVector, RGB(1,0,0), "Target", 1.0, TRUE, 0.2, TRUE,	TRUE ).
		set vd2 TO VECDRAW(Kerbin:position, ShipPointy, RGB(0,1,0), "Us", 1.0, TRUE, 0.2, TRUE,	TRUE ).
		set vd3 TO VECDRAW(Kerbin:position, TargetFlyToVector, RGB(0,0,1), "OurAim", 1.0, TRUE, 0.2, TRUE,	TRUE ).

		set DiffVal to TargetFlyToVector:NORMALIZED * TargetVector:NORMALIZED.
		set kuniverse:timewarp:rate to -999/2*DiffVal + 1001/2. //y=mx+c
		wait 0.1.
	}
	kuniverse:timewarp:cancelwarp().
	CLEARVECDRAWS().

  //Since we do not have access to Nodes, we will have to burn the exact amount of DeltaV calculated.
  lock steering to PROGRADE.
	wait until (SHIP:FACING:FOREVECTOR:NORMALIZED * PROGRADE:FOREVECTOR:NORMALIZED) >= 0.9996.

  set initialDV to STAGE:DELTAV:CURRENT.
  set THROTTLE to 1.
  until (initialDV - STAGE:DELTAV:CURRENT) >= DV1 {
    print "DeltaV burned: " + (initialDV - STAGE:DELTAV:CURRENT) at (0,13).
  }
  set THROTTLE to 0.

	print "Mun Flyby burn completed.".
	wait 1.

	//with our current technology we can't know if we have a transition, so best is to wait and see.
	set kuniverse:timewarp:mode to "RAILS".
	set kuniverse:timewarp:rate to 1000.
	wait until OBT:BODY:NAME = "Mun".
	kuniverse:timewarp:cancelwarp().
}

if OBT:BODY:NAME = "Mun" {
  print "Enjoying Mum?".
  print "Do some science".

	// SET P TO SHIP:PARTSNAMED("GooExperiment")[0].
	// SET M TO P:GETMODULE("ModuleScienceExperiment").
	// M:DEPLOY.

  //nothing to do until we are in the influence of Kerbin again.
  wait until OBT:BODY:NAME = "Kerbin".
  print "Leaving Mum.".
}

if OBT:BODY:NAME = "Kerbin" {
  // after the flyby the PERIAPSIS is too col, so we want to raise it a bit higher.

  lock STEERING to PROGRADE.
  set throttle to 1. //burn all the fuel.
  wait until PERIAPSIS > 50000.
  set throttle to 0.

  lock throttle to RETROGRADE.

  set kuniverse:timewarp:mode to "RAILS".
  // until ETA:APOAPSIS < LengthOfBurn/2 {
  until ALTITUDE < 70000 {
    set kuniverse:timewarp:rate to 1000.
    wait 0.
  }
  kuniverse:timewarp:cancelwarp().

  set kuniverse:timewarp:mode to "PHYSICS".
  until ALTITUDE < 50000 {
    set kuniverse:timewarp:rate to 4.
    wait 0.
  }
  kuniverse:timewarp:cancelwarp().

  set throttle to 1. //burn all the fuel.
  wait until STAGE:DELTAV:CURRENT < 2.
  stage. //drop the fuel tank and engine.

  lock steering to SRFRETROGRADE.

  when ALTITUDE < 70000 then{
		set kuniverse:timewarp:mode to "PHYSICS".
		set kuniverse:timewarp:rate to 4.
	}

  when SHIP:ALTITUDE < 8000 and SHIP:VELOCITY:SURFACE:MAG < 140 then {
    print "Deploying the main parashutes".
    unlock steering.
    stage.
  }

  when SHIP:ALTITUDE < 9000 and SHIP:VELOCITY:SURFACE:MAG < 290 then {
    print "Deploying the Droge shutes".
    stage.
  }

  print "waiting until we have landed.".

  wait until SHIP:STATUS = "LANDED" or SHIP:STATUS = "SPLASHED".
  print "We have landed".
  print "Shutting down.".
	kuniverse:timewarp:cancelwarp().

  SET SHIP.CONTROL.PILOTMAINTHROTTLE to 0.
  SHUTDOWN.
}
